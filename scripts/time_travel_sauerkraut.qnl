summon 'universal_free_realm/standard_protocols'
summon "openQNL"
summon "microbiota"
summon 'time_travel'

object Sauerkraut includes TimeTravel {

  method initialize() {
    if fermenting? {
      send_message(
        ping: {
            "This message hereby certifies this jar to be in full compliance
            with the Universal Free Realm Standard Protocols and suitable for
            both human consumption as well as rudimentary time travel. This document
            establishes a non-binding End User License Agreement between 'consumer'
            AKA (\"You\") & 'consumed' AKA (\"OlyKraut OpenQNL Scripted Sauerkraut\").

            Instructions: Consumer should ingest shortly before an extended period of deep rest.
            Before succumbing to sleep, consumer should wait for callback message
            from mircobiome and respond using the OpenQNL protocol.

            In verbose mode, the desired time travel payload should be formatted thusly.

            `{ datetime: <timestamp>, geolocation: <geocode> }`

            Note: Non-linear movements through time are typically experienced during REM sleep.
            Mileage may vary. Please contact Tech Support or your Inner.HelpDesk if you experience 
            disruptions in your service.

            TOLLFREE (206) 588-KHER"
        }
      );
    }
    else_if ingested_and_living_in_human_microbiome? {
      open_neural_interface();
      travel_time();
    }
    else_if refrigerating? {
      close_connections();
    }
  }
}

object TimeTravel {
  method accept_incoming_vision(vision) {
    print_to_memory_disk(vision);
    recall(UniversalFreeRealm::StandardProtocols::ON_WAKE);
  }
}

TimeTravelSauerkraut.initialize();
